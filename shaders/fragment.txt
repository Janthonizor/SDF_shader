#version 330 core

in vec3 fragmentColor;

out vec4 screenColor;

uniform float u_time;

float sdfSphere(vec3 point, vec3 position, float radius) {
    return length(point - position) - radius;
}

float sdfCube(vec3 point, vec3 b) {
    vec3 q = abs(point) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float smin(float a, float b, float k){
    float h = max (k - abs(a-b), 0.0 )/k;
    return min(a,b) - h*h*h*k*(1.0/6.0);
}

float map(vec3 point) {
    //vec3 sphere_pos = vec3(sin(u_time), 0.0, cos(u_time)); 
    vec3 sphere_pos = vec3(0.0);
    float sphere_rad = 1.0;
    float sphere = sdfSphere(point, sphere_pos, sphere_rad);
    vec3 q = point;
    q = fract(point) - 0.5;
    float box = sdfCube(q, vec3(0.1));
    float ground = point.y +  1.5;
    //return min(ground, smin(sphere, box, 0.75)); 


    return min(ground,sphere);
}

vec3 getNormal(vec3 p, vec3 position, float radius){
    vec2 offset = vec2(0.0001, 0.0);
    vec3 n = vec3(
        sdfSphere(p+offset.xyy, position, radius) - sdfSphere(p - offset.xyy, position, radius),
        sdfSphere(p+offset.yxy, position, radius) - sdfSphere(p - offset.yxy, position, radius),
        sdfSphere(p+offset.yyx, position, radius) - sdfSphere(p - offset.yyx, position, radius)
    );
    return normalize(n);
}

vec3 rod_rot(vec3 p, vec3 axis, float angle){
    return mix(dot(axis,p) * axis, p, cos(angle)) + cross(axis,p) * sin(angle);
}

void main() {
    vec2 resolution = vec2(640.0 * 2.0, 480.0 * 2.0);
    vec2 uv = (gl_FragCoord.xy / resolution - 0.5) * 2.0;
    uv.x *= resolution.x / resolution.y;

    vec3 objCol = vec3(1.0, 0.2, 0.6);
    vec3 lighting = vec3(0.0);
    vec3 ambient = vec3(0.5);
    vec3 light_color = vec3(1.0);
    vec3 light_pos = vec3(sin(u_time),5, cos(u_time));

    
    
    // Initialize camera position and ray direction
    float cam_depth = 3.0;
    vec3 cam = vec3(0.0, 0.0, -cam_depth);
    vec3 ray = normalize(vec3(uv.x, uv.y, 1.0));

    // Raymarching loop
    float t = 0.0;
    vec3 p = vec3(0.0);
    for (int i = 0; i < 80; i++) {
        p = cam + ray * t;
        float dist = map(p);
        if (dist < 0.001) break;
        t += dist;   
    }
    vec3 normal = getNormal(p, vec3(0.0), 1.0);
    float diff_str = max(0.0, dot(light_pos, normal));
    vec3 diffuse = light_color * diff_str;
    lighting = vec3(t*0.1) + diffuse;
    vec3 col = objCol * lighting; 
    screenColor = vec4(col, 1.0);
}
